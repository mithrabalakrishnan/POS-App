// Generated by view binder compiler. Do not edit!
package com.example.pos_android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pos_android.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPaymentBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView buttonConfirmOrder;

  @NonNull
  public final MaterialButton buttonDebitPay;

  @NonNull
  public final EditText etCard;

  @NonNull
  public final EditText etCvv;

  @NonNull
  public final EditText etExpiry;

  @NonNull
  public final LinearLayout layoutContent;

  @NonNull
  public final MaterialCardView layoutDebitCard;

  private FragmentPaymentBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView buttonConfirmOrder, @NonNull MaterialButton buttonDebitPay,
      @NonNull EditText etCard, @NonNull EditText etCvv, @NonNull EditText etExpiry,
      @NonNull LinearLayout layoutContent, @NonNull MaterialCardView layoutDebitCard) {
    this.rootView = rootView;
    this.buttonConfirmOrder = buttonConfirmOrder;
    this.buttonDebitPay = buttonDebitPay;
    this.etCard = etCard;
    this.etCvv = etCvv;
    this.etExpiry = etExpiry;
    this.layoutContent = layoutContent;
    this.layoutDebitCard = layoutDebitCard;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPaymentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPaymentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_payment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPaymentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_confirm_order;
      TextView buttonConfirmOrder = ViewBindings.findChildViewById(rootView, id);
      if (buttonConfirmOrder == null) {
        break missingId;
      }

      id = R.id.button_debit_pay;
      MaterialButton buttonDebitPay = ViewBindings.findChildViewById(rootView, id);
      if (buttonDebitPay == null) {
        break missingId;
      }

      id = R.id.et_card;
      EditText etCard = ViewBindings.findChildViewById(rootView, id);
      if (etCard == null) {
        break missingId;
      }

      id = R.id.et_cvv;
      EditText etCvv = ViewBindings.findChildViewById(rootView, id);
      if (etCvv == null) {
        break missingId;
      }

      id = R.id.et_expiry;
      EditText etExpiry = ViewBindings.findChildViewById(rootView, id);
      if (etExpiry == null) {
        break missingId;
      }

      id = R.id.layout_content;
      LinearLayout layoutContent = ViewBindings.findChildViewById(rootView, id);
      if (layoutContent == null) {
        break missingId;
      }

      id = R.id.layout_debit_card;
      MaterialCardView layoutDebitCard = ViewBindings.findChildViewById(rootView, id);
      if (layoutDebitCard == null) {
        break missingId;
      }

      return new FragmentPaymentBinding((RelativeLayout) rootView, buttonConfirmOrder,
          buttonDebitPay, etCard, etCvv, etExpiry, layoutContent, layoutDebitCard);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
